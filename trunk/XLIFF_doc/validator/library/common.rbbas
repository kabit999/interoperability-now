#tag ModuleProtected Module common	#tag Method, Flags = &h0		Function checkStringArrayContentsAreIdentical(theArray() as string) As boolean		  // returns true if all items in the passed array are identical.		  		  dim i as integer		  for i = ubound(theArray) downTo 1		    if theArray(i) <> theArray(i-1) then		      return false		    end		  Next		  		  // still here? then everything was the same		  return true		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function csvEscape(s as string) As string		  // passed a string, prepares it for csv export		  		  's = ReplaceAll(s,chr(34),"\" + chr(34))		  s = ReplaceAll(s,chr(34),chr(34) + chr(34))		  s = chr(34) + s + chr(34)		  		  return s		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getFirstChildByName(extends e as xmlnode, nodeName as string) As XmlNode		  // this is to match a functionality I found in java code from the Interop Now TIPP sample implementation.		  // seemed like a good general utility function that RB doesn't have natively.		  // pass a string as the argument, to an identified, valid, XMLnode, and it searches for a node by that name in the first-generation children of the xmlnode		  // if a node is found with that name, it returns that node as an xmlnode		  // if nothing found, it returns nil		  		  dim theList as XmlNodeList		  theList = e.Xql(nodeName)		  if theList.Length > 0 then		    // found it!		    return theList.item(0)		  end if		  		  return nil		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function returnDuplicatesFromArray(theArray() as string) As string()		  // sorts and removes duplicates from the passed array		  // differs from removeDuplicatesInArray() by eliminating EVERY item that has one or more duplicates.		  // what's left is the unique strings		  		  // first, make a copy of the array, since arrays and objects are always passed byRef in RB for some dumb reason.		  dim myArray() as string		  dim s as string		  for each s in theArray		    myArray.append s		  next		  		  //sort array		  myarray.Sort		  		  // build array that holds list of ones that have at least 1 duplicate		  dim dups() as string		  dim i as integer		  for i = ubound(myarray) downTo 1		    if myarray(i) =  myarray(i-1) then		      dups.append myarray(i)		    end		  Next		  		  return dups		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function returnNonDuplicatesFromArray(theArray() as string) As string()		  // sorts string array, and if it finds elements that do not have duplicates, it returns them as an array.		  		  // first, make a copy of the array, since arrays and objects are always passed byRef in RB for some dumb reason.		  dim myArray() as string		  dim s as string		  for each s in theArray		    myArray.append s		  next		  		  //sort array		  myarray.Sort		  		  // build array that holds list of ones that have at NO duplicates		  dim nonDups() as string		  		  // remove an item, then check if it still exists. if no, then copy it to the duplicates list.		  // if yes, then keep removing until it's gone, then go to next one.		  dim i as integer		  i = ubound(myArray)		  dim thisItem as string		  while ubound(myArray) > -1 and i > -1		    thisItem = myArray(i)		    myArray.remove i		    if myArray.IndexOf(thisItem) = -1 then		      nonDups.append thisItem		    else		      while myArray.IndexOf(thisItem) <> -1		        myArray.remove myArray.IndexOf(thisItem)		        i = i -1		      wend		    end if		    i = i -1		  wend		  		  return nonDups		  		  		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule